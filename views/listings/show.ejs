<% layout("/layouts/boilerplate") %>
<body>
    <div class="row mt-3">
        <div class="col-8 offset-2">
            <h3><b><%=listing.title %></b></h3>
        </div>
        <div class="card col-6 offset-2 show-card listing-card">
            <div class="card  listing-card">
                <img src="<%=listing.image.url %>" class="card-img-top show-img" alt="listing_image">
                <div class="card-body">
                    <p class="card-text">
                        <i>Owned By : <%=listing.owner.username %></i>
                        <br><br>
                        <%=listing.description %><br>
                        &#8377; <%=listing.price.toLocaleString("en-IN") %><br>
                        <%=listing.location %><br>
                        <%=listing.country %><br>
                        <%=listing.category %>
                    </p>
                </div>
            </div>
        </div>
        <br>

        <% if(currUser && listing.owner._id.equals(currUser._id)) { %>
        <div class="btns mb-3">
            <a href="/listings/<%= listing._id %>/edit" class="btn btn-dark col-2 offset-2 edit-btn">Edit</a>
            <form method="POST" action="/listings/<%=listing._id%>?_method=DELETE">
                <button class="btn btn-dark offset-4">Delete</button>
            </form>
        </div>
        <% } %>
        <br>

        <hr>
        <% if (currUser || listing.reviews.length > 0) { %>
        <div class="card col-6 offset-2 mb-3" >
            <br>
            <% if(currUser) { %>
            <h4>Leave a Review</h4>
            <form class="mb-3 needs-validation" action="/listings/<%=listing.id%>/reviews" method="POST" novalidate>
                <fieldset class="starability-slot">
                    <legend>Rating:</legend>
                    <input type="radio" id="no-rate" class="input-no-rate" name="review[rating]" value="1" checked aria-label="No rating." />
                    <input type="radio" id="first-rate1" name="review[rating]" value="1" />
                    <label for="first-rate1" title="Terrible">1 star</label>
                    <input type="radio" id="first-rate2" name="review[rating]" value="2" />
                    <label for="first-rate2" title="Not good">2 stars</label>
                    <input type="radio" id="first-rate3" name="review[rating]" value="3" />
                    <label for="first-rate3" title="Average">3 stars</label>
                    <input type="radio" id="first-rate4" name="review[rating]" value="4" />
                    <label for="first-rate4" title="Very good">4 stars</label>
                    <input type="radio" id="first-rate5" name="review[rating]" value="5" />
                    <label for="first-rate5" title="Amazing">5 stars</label>
                </fieldset>
                <br>
                <div class="mb-3 mt-3">
                    <label for="comment" class="form-label">Comments</label>
                    <textarea name="review[comment]" id="comment" cols="30" rows="10" class="form-control" required></textarea>
                    <div  class="invalid-feedback">
                        Please enter a review!
                    </div>
                </div>
                <br>
                <button class="btn btn-outline-dark">Submit</button>
            </form>
            <hr>
            <% } %>
            <% if(listing.reviews.length > 0) { %>
            <div class="row">
                <p><b>All Reviews</b></p>
                <% for(review of listing.reviews) { %>
                <div class="card col-sm-10 ms-3 mb-3">
                    <p class="card-title">@ <b><i><%=review.author.username %></i></b></p>
                    <p class="card-text"><%=review.comment%></p>
                    <p class="starability-result card-text" data-rating="<%=review.rating %>">
                    </p>
                    <form class="mb-3" method="POST" action="/listings/<%=listing._id%>/reviews/<%=review._id%>?_method=DELETE">
                        <button class="btn btn-dark btn-sm mb-3">Delete</button>
                    </form>
                </div>
                <% } %>
            </div>
            <% } %>
        </div>
        <% } %>
        
    <!-- GEOCODING SECTION - NEW -->
    <div class="col-6 offset-2 mb-3">
        <h3>Where you'll be</h3>
        <!-- Geocoding Search Box -->
        <div class="geocoding-container mb-3">
            <div class="input-group">
                <input type="text" id="geocoding-input" class="form-control" placeholder="Search for places nearby..." />
                <button class="btn btn-outline-secondary" type="button" id="clear-search">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div id="geocoding-results" class="geocoding-results"></div>
        </div>
        <div id="map" style="height: 400px; border-radius: 8px;"></div>
    </div>
        </div>
    </div>

    <<script>
    document.addEventListener('DOMContentLoaded', async function () {
        // MapTiler API Key
        maptilersdk.config.apiKey = '<%= mapTilerApiKey %>';

        // Get listing location details
        const listingLocation = '<%= listing.location %>';
        const listingCountry = '<%= listing.country %>';
        const fullLocation = `${listingLocation}, ${listingCountry}`;

        let lng = <%= listing.geometry?.coordinates?.[0] || 'null' %>;
        let lat = <%= listing.geometry?.coordinates?.[1] || 'null' %>;

        // If no coordinates stored, geocode the location
        if (!lng || !lat) {
            try {
                const geoResponse = await fetch(
                    `https://api.maptiler.com/geocoding/${encodeURIComponent(fullLocation)}.json?key=<%= mapTilerApiKey %>&limit=1`
                );
                const geoData = await geoResponse.json();
                
                if (geoData.features && geoData.features.length > 0) {
                    lng = geoData.features[0].center[0];
                    lat = geoData.features[0].center[1];
                    console.log(`Geocoded location: ${fullLocation} to [${lng}, ${lat}]`);
                } else {
                    // Fallback to default coordinates (Delhi)
                    lng = 77.2088;
                    lat = 28.6139;
                    console.log('Using default coordinates - location not found');
                }
            } catch (error) {
                console.error('Geocoding failed:', error);
                lng = 77.2088;
                lat = 28.6139;
            }
        }

        let map;
        let currentMarkers = [];

        try {
            map = new maptilersdk.Map({
                container: 'map',
                style: maptilersdk.MapStyle.STREETS,
                center: [lng, lat],
                zoom: 12
            });

            // Original listing marker
            const listingMarker = new maptilersdk.Marker({ color: '#FF6B6B' })
                .setLngLat([lng, lat])
                .addTo(map);

            const popup = new maptilersdk.Popup()
                .setHTML(`<h6><%= listing.title %></h6><p><strong>Location:</strong> ${fullLocation}</p>`);

            listingMarker.setPopup(popup);
            map.addControl(new maptilersdk.NavigationControl(), 'top-right');

            // GEOCODING FUNCTIONALITY
            const geocodingInput = document.getElementById('geocoding-input');
            const geocodingResults = document.getElementById('geocoding-results');
            const clearSearchBtn = document.getElementById('clear-search');
            let searchTimeout;

            // Clear search functionality
            clearSearchBtn.addEventListener('click', function() {
                geocodingInput.value = '';
                geocodingResults.style.display = 'none';
                clearSearchMarkers();
            });

            // Debounced search
            geocodingInput.addEventListener('input', function(e) {
                clearTimeout(searchTimeout);
                const query = e.target.value.trim();
                
                if (query.length < 3) {
                    geocodingResults.style.display = 'none';
                    return;
                }
                
                searchTimeout = setTimeout(() => {
                    searchPlaces(query);
                }, 500);
            });

            // Search places function
            async function searchPlaces(query) {
                try {
                    const response = await fetch(
                        `https://api.maptiler.com/geocoding/${encodeURIComponent(query)}.json?key=<%= mapTilerApiKey %>&limit=8&proximity=${lng},${lat}`
                    );
                    
                    const data = await response.json();
                    displayResults(data.features);
                } catch (error) {
                    console.error('Geocoding error:', error);
                    geocodingResults.innerHTML = '<div class="alert alert-warning">Search failed. Please try again.</div>';
                    geocodingResults.style.display = 'block';
                }
            }

            // Display search results
            function displayResults(features) {
                geocodingResults.innerHTML = '';
                
                if (features.length === 0) {
                    geocodingResults.innerHTML = '<div class="alert alert-info">No places found</div>';
                    geocodingResults.style.display = 'block';
                    return;
                }
                
                features.forEach(feature => {
                    const resultItem = document.createElement('div');
                    resultItem.className = 'geocoding-result-item p-2 border-bottom';
                    resultItem.innerHTML = `
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>${feature.text}</strong>
                                <br><small class="text-muted">${feature.place_name}</small>
                            </div>
                            <i class="fas fa-map-marker-alt text-secondary"></i>
                        </div>
                    `;
                    
                    resultItem.addEventListener('click', () => {
                        selectPlace(feature);
                    });
                    
                    geocodingResults.appendChild(resultItem);
                });
                
                geocodingResults.style.display = 'block';
            }

            // Handle place selection
            function selectPlace(feature) {
                const [searchLng, searchLat] = feature.center;
                
                // Fly to the selected location
                map.flyTo({
                    center: [searchLng, searchLat],
                    zoom: 15,
                    duration: 2000
                });
                
                // Clear previous search markers
                clearSearchMarkers();
                
                // Add new marker for searched place
                const searchMarker = new maptilersdk.Marker({ color: '#28a745' })
                    .setLngLat([searchLng, searchLat])
                    .addTo(map);

                const searchPopup = new maptilersdk.Popup()
                    .setHTML(`<h6>${feature.text}</h6><p>${feature.place_name}</p>`);

                searchMarker.setPopup(searchPopup);
                currentMarkers.push(searchMarker);
                
                // Update input and hide results
                geocodingInput.value = feature.place_name;
                geocodingResults.style.display = 'none';
            }

            // Clear search markers
            function clearSearchMarkers() {
                currentMarkers.forEach(marker => marker.remove());
                currentMarkers = [];
            }

            // Hide results when clicking outside
            document.addEventListener('click', function(e) {
                if (!geocodingInput.contains(e.target) && 
                    !geocodingResults.contains(e.target) && 
                    !clearSearchBtn.contains(e.target)) {
                    geocodingResults.style.display = 'none';
                }
            });

        } catch (err) {
            console.error('Map failed:', err);
            document.getElementById('map').innerHTML = '<p class="text-center pt-5">Map could not be loaded</p>';
        }
    });
    </script>
</body>